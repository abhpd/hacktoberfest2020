//the divide and conquer approach(MinMaxDaC) to find the minimum and maximum element in the given array A.
#include <iostream>
using namespace std;
int Imaxmin(int A[], int n)
{
    int max = A[0];
    int min = A[0];
    for (int i = 1; i < n; i++)
    {
        if (min > A[i])
            min = A[i];
    }
    for (int i = 1; i < n; i++)
    {
        if (max < A[i])
            max = A[i];
    }
    cout << "Maximum element is:" << max << endl;
    cout << "Minimum element is:" << min << endl;
    return 0;
}
int DandC(int A[], int l, int h, int &min, int &max)
{

    if (l == h)
    {
        if (max < A[l])
            max = A[l];
        if (min > A[h])
            min = A[h];
        return 0;
    }
    if (h - l == 1)
    {
        if (A[l] > A[h])
        {
            if (max < A[l])
                max = A[l];
            if (min > A[h])
                min = A[h];
        }
        if (A[l] < A[h])
        {
            if (min > A[l])
                min = A[l];
            if (max < A[h])
                max = A[h];
        }
        return 0;
    }
    int mid = (l + h) / 2;
    DandC(A, l, mid, min, max);
    DandC(A, mid + 1, h, min, max);
}
int main()
{
    int min = 15;
    int max = -1;
    cout << "Enter the no of elements: " << endl;
    int n;
    cin >> n;
    int A[n];
    cout << "Enter all the elements: " << endl;
    for (int i = 0; i < n; i++)
    {
        cin >> A[i];
    }
    cout << "By Iteration Method:\n\n";
    Imaxmin(A, n);
    cout << "By Divide and Conqure method:\n\n";
    DandC(A, 0, n - 1, min, max);
    cout << "Maximum element is:" << max << "\nMinimum element is:" << min;
}
