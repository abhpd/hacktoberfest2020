class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        if(m>n)
            findMedianSortedArrays(nums2,nums1);
       
        int start = 0;
        int end = n;
        int realmid = (n+m+1)/2;
        
        while(start<=end)
        {
            int mid = (start+end)/2;
            int leftASize = mid;
            int leftBSize = realmid - mid;
            
            int leftA = (leftASize > 0) ? nums1[leftASize-1] : Integer.MIN_VALUE;
            int leftB = (leftBSize > 0) ? nums2[leftBSize-1] : Integer.MIN_VALUE;
            int rightA = (leftASize < n) ? nums1[leftASize] :  Integer.MAX_VALUE;
            int rightB = (leftBSize < m) ? nums2[leftBSize] : Integer.MAX_VALUE;
            
            if(leftA<=rightB && leftB <= rightB)
            {
                if((m+n)%2==0){
                    return (Math.max(leftA,leftB) + Math.min(rightA, rightB)) / 2.0;
                }
                else{
                    return Math.max(leftA, leftB);
                }
            }
            else if (leftA>rightB)
            {
                end  = mid - 1;
            }
            else
            {
                start = mid + 1;
            }
            
        }